buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "checkstyle"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

targetCompatibility = 1.8
sourceCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    compile "actually-additions:ActuallyAdditions:release:r105" //      Actually Additions
    compile "agricraft:agricraft:latest:a14" //                         Agricraft
    compile "baubles:Baubles:release:1.3.9" //                          Baubles
    compile "blood-magic:BloodMagic-1.10.2:2.1.9:78" //                 Blood Magic
    compile "chisel:Chisel:MC1.10.2:0.0.9.15" //                        Chisel
    compile "codechicken-lib-1-8:CodeChickenLib:release:universal" //   CodeChickenLib
    compile "cofhcore:CoFHCore-1.10.2:release:universal" //             CoFHCore
    compile "compatlayer:compatlayer:release:0.2.5" //                  Compat Layer
    compile "crafttweaker:CraftTweaker:1.10.2:3.0.24" //                CraftTweaker
    compile "embers:embers:0.104" //                                    Embers
    compile "endercore:EnderCore-1.10.2:0.4.1.65:beta" //               EnderCore
    compile "ender-io:EnderIO:1.10.2:3.1.180" //                        EnderIO
    compile "ex-compressum:ExCompressum_1.10.2:2.0.97" //               Ex Compressum
    compile "ex-nihilo-adscensio:exnihiloadscensio:1.10.2:0.1.20" //    Ex Nihilo Adscensio
    compile "extra-utilities:extrautils2:1.10.2:1.3.3" //               Extra Utils 2
    compile "forestry:forestry_1.10.2:5.2.17.373" //                    Forestry
    compile "guide-api:Guide-API-1.10.2:2.0.3:46" //                    Guide API
    compile "infinitylib:infinitylib:0.8.0" //                          InfinityLib
    compile "just-enough-items-jei:jei_1.10.2:3.14.7.417" //            Just Enough Items
    compile "mantle:Mantle:1.10.2:1.1.5" //                             Mantle
    compile "mcmultipart:MCMultiPart:1.3.0:universal" //                MCMultiPart
    compile "modtweaker:ModTweaker2:2.0.11" //                          ModTweaker
    compile "mtlib:MTLib:1.0.2" //                                      MTLib
    //compile "mystical-agriculture:mysticalagriculture%5B1.10.2%5D:release" // Mystical Agriculture
    compile "projecte:ProjectE:1.10.2:PE1.2.0" //                       ProjectE
    compile "random-things:RandomThings:MC1.10.2:3.7.7" //              Random Things
    compile "refined-storage:refinedstorage:1.2.25" //                  Refined Storage

    compileOnly "org.projectlombok:lombok:1.16.16" //                   Lombok

    compile "tinkers-construct:TConstruct:1.10.2:2.6.3" //              Tinkers' Construct
    compile "tesla:Tesla:1.10.2:1.2.1.49" //                            Tesla
    compile "thermalexpansion:ThermalExpansion:release:universal" //    Thermal Expansion
    compile "thermal-foundation:ThermalFoundation:release:universal" // Thermal Foundation
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    include "com/lousylynx/integrity/**"
    include "assets/**"
    include "mcmod.info"
    include "pack.mcmeta"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

task apiJar(type: Jar, dependsOn: 'sourceMainJava') {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/lousylynx/integrity/api/**/*'
    classifier 'api'
}

artifacts {
    archives deobfJar
    archives apiJar
    archives sourceJar
    archives jar
}

publishing {
    publications {
        Bintray(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version + '-' + System.getenv('TRAVIS_BUILD_NUMBER')
            artifact deobfJar
            artifact sourceJar
            artifact apiJar
            artifact jar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Bintray']
    publish = true

    pkg {
        repo = 'dev'
        name = 'Integrity'

        version {
            name = project.version + '-' + System.getenv('TRAVIS_BUILD_NUMBER')
            released = new Date()
        }
    }
}